// Code generated by mockery v2.53.5. DO NOT EDIT.

package verifier_mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	protocol "github.com/smartcontractkit/chainlink-ccv/protocol"

	verifier "github.com/smartcontractkit/chainlink-ccv/verifier"
)

// MockSourceReader is an autogenerated mock type for the SourceReader type
type MockSourceReader struct {
	mock.Mock
}

type MockSourceReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSourceReader) EXPECT() *MockSourceReader_Expecter {
	return &MockSourceReader_Expecter{mock: &_m.Mock}
}

// BlockTime provides a mock function with given fields: ctx, block
func (_m *MockSourceReader) BlockTime(ctx context.Context, block *big.Int) (uint64, error) {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for BlockTime")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (uint64, error)); ok {
		return rf(ctx, block)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) uint64); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSourceReader_BlockTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockTime'
type MockSourceReader_BlockTime_Call struct {
	*mock.Call
}

// BlockTime is a helper method to define mock.On call
//   - ctx context.Context
//   - block *big.Int
func (_e *MockSourceReader_Expecter) BlockTime(ctx interface{}, block interface{}) *MockSourceReader_BlockTime_Call {
	return &MockSourceReader_BlockTime_Call{Call: _e.mock.On("BlockTime", ctx, block)}
}

func (_c *MockSourceReader_BlockTime_Call) Run(run func(ctx context.Context, block *big.Int)) *MockSourceReader_BlockTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *MockSourceReader_BlockTime_Call) Return(_a0 uint64, _a1 error) *MockSourceReader_BlockTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSourceReader_BlockTime_Call) RunAndReturn(run func(context.Context, *big.Int) (uint64, error)) *MockSourceReader_BlockTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByHash provides a mock function with given fields: ctx, hash
func (_m *MockSourceReader) GetBlockHeaderByHash(ctx context.Context, hash protocol.Bytes32) (*protocol.BlockHeader, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByHash")
	}

	var r0 *protocol.BlockHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, protocol.Bytes32) (*protocol.BlockHeader, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, protocol.Bytes32) *protocol.BlockHeader); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, protocol.Bytes32) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSourceReader_GetBlockHeaderByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByHash'
type MockSourceReader_GetBlockHeaderByHash_Call struct {
	*mock.Call
}

// GetBlockHeaderByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash protocol.Bytes32
func (_e *MockSourceReader_Expecter) GetBlockHeaderByHash(ctx interface{}, hash interface{}) *MockSourceReader_GetBlockHeaderByHash_Call {
	return &MockSourceReader_GetBlockHeaderByHash_Call{Call: _e.mock.On("GetBlockHeaderByHash", ctx, hash)}
}

func (_c *MockSourceReader_GetBlockHeaderByHash_Call) Run(run func(ctx context.Context, hash protocol.Bytes32)) *MockSourceReader_GetBlockHeaderByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(protocol.Bytes32))
	})
	return _c
}

func (_c *MockSourceReader_GetBlockHeaderByHash_Call) Return(_a0 *protocol.BlockHeader, _a1 error) *MockSourceReader_GetBlockHeaderByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSourceReader_GetBlockHeaderByHash_Call) RunAndReturn(run func(context.Context, protocol.Bytes32) (*protocol.BlockHeader, error)) *MockSourceReader_GetBlockHeaderByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocksHeaders provides a mock function with given fields: ctx, blockNumber
func (_m *MockSourceReader) GetBlocksHeaders(ctx context.Context, blockNumber []*big.Int) (map[*big.Int]protocol.BlockHeader, error) {
	ret := _m.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocksHeaders")
	}

	var r0 map[*big.Int]protocol.BlockHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*big.Int) (map[*big.Int]protocol.BlockHeader, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*big.Int) map[*big.Int]protocol.BlockHeader); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*big.Int]protocol.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*big.Int) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSourceReader_GetBlocksHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocksHeaders'
type MockSourceReader_GetBlocksHeaders_Call struct {
	*mock.Call
}

// GetBlocksHeaders is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber []*big.Int
func (_e *MockSourceReader_Expecter) GetBlocksHeaders(ctx interface{}, blockNumber interface{}) *MockSourceReader_GetBlocksHeaders_Call {
	return &MockSourceReader_GetBlocksHeaders_Call{Call: _e.mock.On("GetBlocksHeaders", ctx, blockNumber)}
}

func (_c *MockSourceReader_GetBlocksHeaders_Call) Run(run func(ctx context.Context, blockNumber []*big.Int)) *MockSourceReader_GetBlocksHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*big.Int))
	})
	return _c
}

func (_c *MockSourceReader_GetBlocksHeaders_Call) Return(_a0 map[*big.Int]protocol.BlockHeader, _a1 error) *MockSourceReader_GetBlocksHeaders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSourceReader_GetBlocksHeaders_Call) RunAndReturn(run func(context.Context, []*big.Int) (map[*big.Int]protocol.BlockHeader, error)) *MockSourceReader_GetBlocksHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// VerificationTasks provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *MockSourceReader) VerificationTasks(ctx context.Context, fromBlock *big.Int, toBlock *big.Int) ([]verifier.VerificationTask, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for VerificationTasks")
	}

	var r0 []verifier.VerificationTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, *big.Int) ([]verifier.VerificationTask, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, *big.Int) []verifier.VerificationTask); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]verifier.VerificationTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int, *big.Int) error); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSourceReader_VerificationTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerificationTasks'
type MockSourceReader_VerificationTasks_Call struct {
	*mock.Call
}

// VerificationTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock *big.Int
//   - toBlock *big.Int
func (_e *MockSourceReader_Expecter) VerificationTasks(ctx interface{}, fromBlock interface{}, toBlock interface{}) *MockSourceReader_VerificationTasks_Call {
	return &MockSourceReader_VerificationTasks_Call{Call: _e.mock.On("VerificationTasks", ctx, fromBlock, toBlock)}
}

func (_c *MockSourceReader_VerificationTasks_Call) Run(run func(ctx context.Context, fromBlock *big.Int, toBlock *big.Int)) *MockSourceReader_VerificationTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int), args[2].(*big.Int))
	})
	return _c
}

func (_c *MockSourceReader_VerificationTasks_Call) Return(_a0 []verifier.VerificationTask, _a1 error) *MockSourceReader_VerificationTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSourceReader_VerificationTasks_Call) RunAndReturn(run func(context.Context, *big.Int, *big.Int) ([]verifier.VerificationTask, error)) *MockSourceReader_VerificationTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSourceReader creates a new instance of MockSourceReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSourceReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSourceReader {
	mock := &MockSourceReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
