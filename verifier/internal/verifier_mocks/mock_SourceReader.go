// Code generated by mockery v2.52.3. DO NOT EDIT.

package verifier_mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-ccv/verifier/pkg/types"
)

// MockSourceReader is an autogenerated mock type for the SourceReader type
type MockSourceReader struct {
	mock.Mock
}

type MockSourceReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSourceReader) EXPECT() *MockSourceReader_Expecter {
	return &MockSourceReader_Expecter{mock: &_m.Mock}
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *MockSourceReader) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSourceReader_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockSourceReader_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSourceReader_Expecter) HealthCheck(ctx interface{}) *MockSourceReader_HealthCheck_Call {
	return &MockSourceReader_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *MockSourceReader_HealthCheck_Call) Run(run func(ctx context.Context)) *MockSourceReader_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSourceReader_HealthCheck_Call) Return(_a0 error) *MockSourceReader_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourceReader_HealthCheck_Call) RunAndReturn(run func(context.Context) error) *MockSourceReader_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// LatestBlock provides a mock function with given fields: ctx
func (_m *MockSourceReader) LatestBlock(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LatestBlock")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSourceReader_LatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestBlock'
type MockSourceReader_LatestBlock_Call struct {
	*mock.Call
}

// LatestBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSourceReader_Expecter) LatestBlock(ctx interface{}) *MockSourceReader_LatestBlock_Call {
	return &MockSourceReader_LatestBlock_Call{Call: _e.mock.On("LatestBlock", ctx)}
}

func (_c *MockSourceReader_LatestBlock_Call) Run(run func(ctx context.Context)) *MockSourceReader_LatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSourceReader_LatestBlock_Call) Return(_a0 *big.Int, _a1 error) *MockSourceReader_LatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSourceReader_LatestBlock_Call) RunAndReturn(run func(context.Context) (*big.Int, error)) *MockSourceReader_LatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// LatestFinalizedBlock provides a mock function with given fields: ctx
func (_m *MockSourceReader) LatestFinalizedBlock(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LatestFinalizedBlock")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSourceReader_LatestFinalizedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestFinalizedBlock'
type MockSourceReader_LatestFinalizedBlock_Call struct {
	*mock.Call
}

// LatestFinalizedBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSourceReader_Expecter) LatestFinalizedBlock(ctx interface{}) *MockSourceReader_LatestFinalizedBlock_Call {
	return &MockSourceReader_LatestFinalizedBlock_Call{Call: _e.mock.On("LatestFinalizedBlock", ctx)}
}

func (_c *MockSourceReader_LatestFinalizedBlock_Call) Run(run func(ctx context.Context)) *MockSourceReader_LatestFinalizedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSourceReader_LatestFinalizedBlock_Call) Return(_a0 *big.Int, _a1 error) *MockSourceReader_LatestFinalizedBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSourceReader_LatestFinalizedBlock_Call) RunAndReturn(run func(context.Context) (*big.Int, error)) *MockSourceReader_LatestFinalizedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockSourceReader) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSourceReader_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockSourceReader_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSourceReader_Expecter) Start(ctx interface{}) *MockSourceReader_Start_Call {
	return &MockSourceReader_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockSourceReader_Start_Call) Run(run func(ctx context.Context)) *MockSourceReader_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSourceReader_Start_Call) Return(_a0 error) *MockSourceReader_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourceReader_Start_Call) RunAndReturn(run func(context.Context) error) *MockSourceReader_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockSourceReader) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSourceReader_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockSourceReader_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockSourceReader_Expecter) Stop() *MockSourceReader_Stop_Call {
	return &MockSourceReader_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockSourceReader_Stop_Call) Run(run func()) *MockSourceReader_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSourceReader_Stop_Call) Return(_a0 error) *MockSourceReader_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourceReader_Stop_Call) RunAndReturn(run func() error) *MockSourceReader_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// VerificationTaskChannel provides a mock function with no fields
func (_m *MockSourceReader) VerificationTaskChannel() <-chan types.VerificationTask {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VerificationTaskChannel")
	}

	var r0 <-chan types.VerificationTask
	if rf, ok := ret.Get(0).(func() <-chan types.VerificationTask); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan types.VerificationTask)
		}
	}

	return r0
}

// MockSourceReader_VerificationTaskChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerificationTaskChannel'
type MockSourceReader_VerificationTaskChannel_Call struct {
	*mock.Call
}

// VerificationTaskChannel is a helper method to define mock.On call
func (_e *MockSourceReader_Expecter) VerificationTaskChannel() *MockSourceReader_VerificationTaskChannel_Call {
	return &MockSourceReader_VerificationTaskChannel_Call{Call: _e.mock.On("VerificationTaskChannel")}
}

func (_c *MockSourceReader_VerificationTaskChannel_Call) Run(run func()) *MockSourceReader_VerificationTaskChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSourceReader_VerificationTaskChannel_Call) Return(_a0 <-chan types.VerificationTask) *MockSourceReader_VerificationTaskChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourceReader_VerificationTaskChannel_Call) RunAndReturn(run func() <-chan types.VerificationTask) *MockSourceReader_VerificationTaskChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSourceReader creates a new instance of MockSourceReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSourceReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSourceReader {
	mock := &MockSourceReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
