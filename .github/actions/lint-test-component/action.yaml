name: "Lint and Test Component"
description: "Generic action for linting and testing Go components with coverage reporting"

inputs:
  dir:
    description: "Working directory for the component (e.g., executor, indexer, verifier)"
    required: true
  go-mod-path:
    description: "Path to go.mod file for Go version detection (e.g., executor/go.mod)"
    required: true
  go-sum-path:
    description: "Path to go.sum file for dependency caching (e.g., executor/go.sum)"
    required: true
  install-protoc:
    description: "Whether to install protoc (for common component)"
    required: false
    default: "false"
  run-proto-check:
    description: "Whether to run proto-check (for common component)"
    required: false
    default: "false"
  github-token:
    description: "The `GITHUB_TOKEN` issued for the workflow."
    default: ${{ github.token }}
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - name: Set up Go
      uses: actions/setup-go@v6 # v6
      with:
        cache: true
        go-version-file: ${{ inputs.go-mod-path }}
        cache-dependency-path: ${{ inputs.go-sum-path }}

    - name: Load tool versions
      id: tool-versions
      shell: bash
      run: |
        set -euo pipefail
        source "${GITHUB_WORKSPACE}/tool-versions.env" 

        # Make it a step output
        echo "golangci_lint_version=$VERSION_GOLANGCI_LINT" >> "$GITHUB_OUTPUT"

    - name: Populate go envs
      shell: bash
      run: |
        echo "GOBIN=$(go env GOPATH)/bin" >> $GITHUB_ENV
        echo "GOCACHE=$(go env GOPATH)/build" >> $GITHUB_ENV

    - name: Cache Go toolchain artifacts
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.GOBIN }}
          ${{ env.GOCACHE }}
        # hashFiles paths are repo-root relative (not affected by working-directory)
        key: chainlink-ccv-gotools-${{ runner.os }}-${{ hashFiles('tool-versions.env') }}
        restore-keys: |
          chainlink-ccv-gotools-${{ runner.os }}-

    - name: Install just
      uses: extractions/setup-just@69d82fb0233557aec017ef13706851d0694e0f1d # v2.0.0

    - name: Install protoc
      shell: bash
      run: |
        if [ "${{ inputs.install-protoc }}" = "true" ]; then
          just install-protoc
          just ensure-protoc
        fi

    - name: Install golangci-lint
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
          | sh -s -- -b $(go env GOPATH)/bin v${{ steps.tool-versions.outputs.golangci_lint_version }}
        golangci-lint version

    - name: Run lint
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: just lint

    - name: Run proto-check
      if: inputs.run-proto-check == 'true'
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: just proto-check

    - name: Run tests
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: COVERAGE_FILE=coverage.out just test-coverage

    - name: Generate coverage report
      if: github.event_name == 'pull_request'
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        total=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "coverage=$total" >> $GITHUB_ENV

    - name: Coverage on target branch
      if: github.event_name == 'pull_request'
      working-directory: ${{ inputs.dir }}
      shell: bash
      run: |
        git fetch origin ${{ github.base_ref }}
        git branch -a
        git checkout ${{ github.base_ref }}
        # TODO: switch to just once available in the base branch.
        # COVERAGE_FILE=coverage_target.out just test-coverage
        go test -shuffle on -v -coverprofile=coverage_target.out ./...
        total=$(go tool cover -func=coverage_target.out | grep total | awk '{print $3}')
        echo "coverage_target=$total" >> $GITHUB_ENV

    - name: Remove previous coverage comments
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo, number: issue_number } = context.issue;
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number
          });
          const coverageCommentPrefix = "| Metric |";
          for (const comment of comments.data) {
            if (comment.body.startsWith(coverageCommentPrefix)) {
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id
              });
            }
          }

    - name: Display coverage in PR comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const coverage = process.env.coverage;
          const coverage_target = process.env.coverage_target;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `| Metric | \`${{ github.head_ref }}\` | \`${{ github.base_ref }}\` |\n|--|--|--|\n| **${{ inputs.dir }} Coverage** | ${coverage} | ${coverage_target} |`
          });
