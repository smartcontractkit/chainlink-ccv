[ccv]
  # LINK token contract address (static for Anvil and testnets)
  link_contract_address = "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  # Chainlink node funding in ETH (1**18 wei)
  cl_nodes_funding_eth = 50
  # Chainlink node funding in LINK (1**18 wei)
  cl_nodes_funding_link = 50
  # amount of time we'll wait for the first feed answer, if there is no answer environment is not working
  verification_timeout = 400
  # target blockchain finality depth
  chain_finality_depth = 5
  # whether to verify product deployment or not
  verify = true

  [ccv.gas_settings]
  # EIP1159 fee cap multiplier (default, for all transactions)
  fee_cap_multiplier = 2
  # EIP1159 fee cap multiplier (default, for all transactions)
  tip_cap_multiplier = 2

  [ccv.ea_fake]
    # low response value of fake External Adapter
    # values are chosen randomly, either low or high
    low_value = 3
    # high response value of a fake External Adapter
    high_value = 30000

  [ccv.jobs]
    # OCRv2 config refresh interval, query the chain and get the latest config
    config_poll_interval_sec = 5
    # maximum job task duration in Go duration in seconds
    max_task_duration_sec = 60

[[blockchains]]
  container_name = "blockchain-src"
  chain_id = "1337"
  docker_cmd_params = ["-b", "1", "--mixed-mining"]
  image = "ghcr.io/foundry-rs/foundry:latest"
  port = "8545"
  type = "anvil"

[[blockchains]]
  container_name = "blockchain-dst"
  chain_id = "2337"
  docker_cmd_params = ["-b", "1", "--mixed-mining"]
  image = "ghcr.io/foundry-rs/foundry:latest"
  port = "8555"
  type = "anvil"

[jd]
  csa_encryption_key = "1a3f7e9d2c5b8a0f4e6d9c2b7a1e5f3d8c0b9a8d7f6e5c4b3a2d1e0f9a8b7c1a"
  image = "job-distributor:local"

[fake]
  image = "ccv-fakes:dev"
  port = 9111
  source_code_path = "../build/devenv/fakes"
  root_path = "../../"

# this is an example config of a new ccv service that can be integrated, see "services/indexer.go" and read README in that dir
# since the prodct is in early stages we run dev images by default, with hot-reload
[verifier]
  image = "verifier:dev"
  container_name = "verifier"
  port = 8100
  # path is relative from "devenv" dir
  source_code_path = "../verifier"
  root_path = "../../"
  [verifier.db]
    image = "postgres:16-alpine"
    name = "verifier_db"
    port = 8432

[verifier2]
  image = "verifier:dev"
  container_name = "verifier2"
  port = 8200
  # path is relative from "devenv" dir
  source_code_path = "../verifier"
  root_path = "../../"
  [verifier2.db]
    image = "postgres:16-alpine"
    name = "verifier2_db"
    port = 8433

[executor]
  image = "executor:dev"
  port = 8101
  source_code_path = "../executor"
  root_path = "../../"

[indexer]
  image = "indexer:dev"
  port = 8102
  source_code_path = "../indexer"
  root_path = "../../"
  [indexer.db]
    image = "postgres:16-alpine"

[aggregator]
  image = "aggregator:dev"
  port = 50051
  source_code_path = "../aggregator"
  root_path = "../../"
  [aggregator.db]
    image = "postgres:16-alpine"

[[nodesets]]
  name = "don"
  nodes = 4
  override_mode = "each"

  [nodesets.db]
    image = "postgres:15.0"

  [[nodesets.node_specs]]

    [nodesets.node_specs.node]
      image = "public.ecr.aws/chainlink/chainlink:2.26.0"

  [[nodesets.node_specs]]

    [nodesets.node_specs.node]
      image = "public.ecr.aws/chainlink/chainlink:2.26.0"

  [[nodesets.node_specs]]

    [nodesets.node_specs.node]
      image = "public.ecr.aws/chainlink/chainlink:2.26.0"

  [[nodesets.node_specs]]

    [nodesets.node_specs.node]
      image = "public.ecr.aws/chainlink/chainlink:2.26.0"
