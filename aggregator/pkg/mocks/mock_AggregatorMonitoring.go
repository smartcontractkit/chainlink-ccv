// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	common "github.com/smartcontractkit/chainlink-ccv/aggregator/pkg/common"
	mock "github.com/stretchr/testify/mock"
)

// MockAggregatorMonitoring is an autogenerated mock type for the AggregatorMonitoring type
type MockAggregatorMonitoring struct {
	mock.Mock
}

type MockAggregatorMonitoring_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggregatorMonitoring) EXPECT() *MockAggregatorMonitoring_Expecter {
	return &MockAggregatorMonitoring_Expecter{mock: &_m.Mock}
}

// Metrics provides a mock function with no fields
func (_m *MockAggregatorMonitoring) Metrics() common.AggregatorMetricLabeler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metrics")
	}

	var r0 common.AggregatorMetricLabeler
	if rf, ok := ret.Get(0).(func() common.AggregatorMetricLabeler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.AggregatorMetricLabeler)
		}
	}

	return r0
}

// MockAggregatorMonitoring_Metrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metrics'
type MockAggregatorMonitoring_Metrics_Call struct {
	*mock.Call
}

// Metrics is a helper method to define mock.On call
func (_e *MockAggregatorMonitoring_Expecter) Metrics() *MockAggregatorMonitoring_Metrics_Call {
	return &MockAggregatorMonitoring_Metrics_Call{Call: _e.mock.On("Metrics")}
}

func (_c *MockAggregatorMonitoring_Metrics_Call) Run(run func()) *MockAggregatorMonitoring_Metrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregatorMonitoring_Metrics_Call) Return(_a0 common.AggregatorMetricLabeler) *MockAggregatorMonitoring_Metrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregatorMonitoring_Metrics_Call) RunAndReturn(run func() common.AggregatorMetricLabeler) *MockAggregatorMonitoring_Metrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAggregatorMonitoring creates a new instance of MockAggregatorMonitoring. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggregatorMonitoring(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggregatorMonitoring {
	mock := &MockAggregatorMonitoring{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
