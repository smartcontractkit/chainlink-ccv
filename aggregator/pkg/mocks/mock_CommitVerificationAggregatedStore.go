// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/smartcontractkit/chainlink-ccv/aggregator/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCommitVerificationAggregatedStore is an autogenerated mock type for the CommitVerificationAggregatedStore type
type MockCommitVerificationAggregatedStore struct {
	mock.Mock
}

type MockCommitVerificationAggregatedStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommitVerificationAggregatedStore) EXPECT() *MockCommitVerificationAggregatedStore_Expecter {
	return &MockCommitVerificationAggregatedStore_Expecter{mock: &_m.Mock}
}

// GetCCVData provides a mock function with given fields: ctx, messageID, committeeID
func (_m *MockCommitVerificationAggregatedStore) GetCCVData(ctx context.Context, messageID []byte, committeeID string) (*model.CommitAggregatedReport, error) {
	ret := _m.Called(ctx, messageID, committeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetCCVData")
	}

	var r0 *model.CommitAggregatedReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (*model.CommitAggregatedReport, error)); ok {
		return rf(ctx, messageID, committeeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) *model.CommitAggregatedReport); ok {
		r0 = rf(ctx, messageID, committeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CommitAggregatedReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, messageID, committeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitVerificationAggregatedStore_GetCCVData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCCVData'
type MockCommitVerificationAggregatedStore_GetCCVData_Call struct {
	*mock.Call
}

// GetCCVData is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID []byte
//   - committeeID string
func (_e *MockCommitVerificationAggregatedStore_Expecter) GetCCVData(ctx interface{}, messageID interface{}, committeeID interface{}) *MockCommitVerificationAggregatedStore_GetCCVData_Call {
	return &MockCommitVerificationAggregatedStore_GetCCVData_Call{Call: _e.mock.On("GetCCVData", ctx, messageID, committeeID)}
}

func (_c *MockCommitVerificationAggregatedStore_GetCCVData_Call) Run(run func(ctx context.Context, messageID []byte, committeeID string)) *MockCommitVerificationAggregatedStore_GetCCVData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockCommitVerificationAggregatedStore_GetCCVData_Call) Return(_a0 *model.CommitAggregatedReport, _a1 error) *MockCommitVerificationAggregatedStore_GetCCVData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitVerificationAggregatedStore_GetCCVData_Call) RunAndReturn(run func(context.Context, []byte, string) (*model.CommitAggregatedReport, error)) *MockCommitVerificationAggregatedStore_GetCCVData_Call {
	_c.Call.Return(run)
	return _c
}

// QueryAggregatedReports provides a mock function with given fields: ctx, start, end, committeeID
func (_m *MockCommitVerificationAggregatedStore) QueryAggregatedReports(ctx context.Context, start int64, end int64, committeeID string) ([]*model.CommitAggregatedReport, error) {
	ret := _m.Called(ctx, start, end, committeeID)

	if len(ret) == 0 {
		panic("no return value specified for QueryAggregatedReports")
	}

	var r0 []*model.CommitAggregatedReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) ([]*model.CommitAggregatedReport, error)); ok {
		return rf(ctx, start, end, committeeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) []*model.CommitAggregatedReport); ok {
		r0 = rf(ctx, start, end, committeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CommitAggregatedReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string) error); ok {
		r1 = rf(ctx, start, end, committeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryAggregatedReports'
type MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call struct {
	*mock.Call
}

// QueryAggregatedReports is a helper method to define mock.On call
//   - ctx context.Context
//   - start int64
//   - end int64
//   - committeeID string
func (_e *MockCommitVerificationAggregatedStore_Expecter) QueryAggregatedReports(ctx interface{}, start interface{}, end interface{}, committeeID interface{}) *MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call {
	return &MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call{Call: _e.mock.On("QueryAggregatedReports", ctx, start, end, committeeID)}
}

func (_c *MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call) Run(run func(ctx context.Context, start int64, end int64, committeeID string)) *MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call) Return(_a0 []*model.CommitAggregatedReport, _a1 error) *MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call) RunAndReturn(run func(context.Context, int64, int64, string) ([]*model.CommitAggregatedReport, error)) *MockCommitVerificationAggregatedStore_QueryAggregatedReports_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommitVerificationAggregatedStore creates a new instance of MockCommitVerificationAggregatedStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommitVerificationAggregatedStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommitVerificationAggregatedStore {
	mock := &MockCommitVerificationAggregatedStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
