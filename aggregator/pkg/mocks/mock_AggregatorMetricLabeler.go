// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/smartcontractkit/chainlink-ccv/aggregator/pkg/common"

	mock "github.com/stretchr/testify/mock"
)

// MockAggregatorMetricLabeler is an autogenerated mock type for the AggregatorMetricLabeler type
type MockAggregatorMetricLabeler struct {
	mock.Mock
}

type MockAggregatorMetricLabeler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggregatorMetricLabeler) EXPECT() *MockAggregatorMetricLabeler_Expecter {
	return &MockAggregatorMetricLabeler_Expecter{mock: &_m.Mock}
}

// DecrementActiveRequestsCounter provides a mock function with given fields: ctx
func (_m *MockAggregatorMetricLabeler) DecrementActiveRequestsCounter(ctx context.Context) {
	_m.Called(ctx)
}

// MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrementActiveRequestsCounter'
type MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call struct {
	*mock.Call
}

// DecrementActiveRequestsCounter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAggregatorMetricLabeler_Expecter) DecrementActiveRequestsCounter(ctx interface{}) *MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call {
	return &MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call{Call: _e.mock.On("DecrementActiveRequestsCounter", ctx)}
}

func (_c *MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call) Run(run func(ctx context.Context)) *MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call) Return() *MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call) RunAndReturn(run func(context.Context)) *MockAggregatorMetricLabeler_DecrementActiveRequestsCounter_Call {
	_c.Run(run)
	return _c
}

// DecrementPendingAggregationsChannelBuffer provides a mock function with given fields: ctx, count
func (_m *MockAggregatorMetricLabeler) DecrementPendingAggregationsChannelBuffer(ctx context.Context, count int) {
	_m.Called(ctx, count)
}

// MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrementPendingAggregationsChannelBuffer'
type MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call struct {
	*mock.Call
}

// DecrementPendingAggregationsChannelBuffer is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *MockAggregatorMetricLabeler_Expecter) DecrementPendingAggregationsChannelBuffer(ctx interface{}, count interface{}) *MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call {
	return &MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call{Call: _e.mock.On("DecrementPendingAggregationsChannelBuffer", ctx, count)}
}

func (_c *MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call) Run(run func(ctx context.Context, count int)) *MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call) Return() *MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call) RunAndReturn(run func(context.Context, int)) *MockAggregatorMetricLabeler_DecrementPendingAggregationsChannelBuffer_Call {
	_c.Run(run)
	return _c
}

// IncrementAPIRequestErrors provides a mock function with given fields: ctx
func (_m *MockAggregatorMetricLabeler) IncrementAPIRequestErrors(ctx context.Context) {
	_m.Called(ctx)
}

// MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementAPIRequestErrors'
type MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call struct {
	*mock.Call
}

// IncrementAPIRequestErrors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAggregatorMetricLabeler_Expecter) IncrementAPIRequestErrors(ctx interface{}) *MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call {
	return &MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call{Call: _e.mock.On("IncrementAPIRequestErrors", ctx)}
}

func (_c *MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call) Run(run func(ctx context.Context)) *MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call) Return() *MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call) RunAndReturn(run func(context.Context)) *MockAggregatorMetricLabeler_IncrementAPIRequestErrors_Call {
	_c.Run(run)
	return _c
}

// IncrementActiveRequestsCounter provides a mock function with given fields: ctx
func (_m *MockAggregatorMetricLabeler) IncrementActiveRequestsCounter(ctx context.Context) {
	_m.Called(ctx)
}

// MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementActiveRequestsCounter'
type MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call struct {
	*mock.Call
}

// IncrementActiveRequestsCounter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAggregatorMetricLabeler_Expecter) IncrementActiveRequestsCounter(ctx interface{}) *MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call {
	return &MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call{Call: _e.mock.On("IncrementActiveRequestsCounter", ctx)}
}

func (_c *MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call) Run(run func(ctx context.Context)) *MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call) Return() *MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call) RunAndReturn(run func(context.Context)) *MockAggregatorMetricLabeler_IncrementActiveRequestsCounter_Call {
	_c.Run(run)
	return _c
}

// IncrementCompletedAggregations provides a mock function with given fields: ctx
func (_m *MockAggregatorMetricLabeler) IncrementCompletedAggregations(ctx context.Context) {
	_m.Called(ctx)
}

// MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementCompletedAggregations'
type MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call struct {
	*mock.Call
}

// IncrementCompletedAggregations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAggregatorMetricLabeler_Expecter) IncrementCompletedAggregations(ctx interface{}) *MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call {
	return &MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call{Call: _e.mock.On("IncrementCompletedAggregations", ctx)}
}

func (_c *MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call) Run(run func(ctx context.Context)) *MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call) Return() *MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call) RunAndReturn(run func(context.Context)) *MockAggregatorMetricLabeler_IncrementCompletedAggregations_Call {
	_c.Run(run)
	return _c
}

// IncrementPendingAggregationsChannelBuffer provides a mock function with given fields: ctx, count
func (_m *MockAggregatorMetricLabeler) IncrementPendingAggregationsChannelBuffer(ctx context.Context, count int) {
	_m.Called(ctx, count)
}

// MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementPendingAggregationsChannelBuffer'
type MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call struct {
	*mock.Call
}

// IncrementPendingAggregationsChannelBuffer is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *MockAggregatorMetricLabeler_Expecter) IncrementPendingAggregationsChannelBuffer(ctx interface{}, count interface{}) *MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call {
	return &MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call{Call: _e.mock.On("IncrementPendingAggregationsChannelBuffer", ctx, count)}
}

func (_c *MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call) Run(run func(ctx context.Context, count int)) *MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call) Return() *MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call) RunAndReturn(run func(context.Context, int)) *MockAggregatorMetricLabeler_IncrementPendingAggregationsChannelBuffer_Call {
	_c.Run(run)
	return _c
}

// IncrementStorageError provides a mock function with given fields: ctx
func (_m *MockAggregatorMetricLabeler) IncrementStorageError(ctx context.Context) {
	_m.Called(ctx)
}

// MockAggregatorMetricLabeler_IncrementStorageError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementStorageError'
type MockAggregatorMetricLabeler_IncrementStorageError_Call struct {
	*mock.Call
}

// IncrementStorageError is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAggregatorMetricLabeler_Expecter) IncrementStorageError(ctx interface{}) *MockAggregatorMetricLabeler_IncrementStorageError_Call {
	return &MockAggregatorMetricLabeler_IncrementStorageError_Call{Call: _e.mock.On("IncrementStorageError", ctx)}
}

func (_c *MockAggregatorMetricLabeler_IncrementStorageError_Call) Run(run func(ctx context.Context)) *MockAggregatorMetricLabeler_IncrementStorageError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementStorageError_Call) Return() *MockAggregatorMetricLabeler_IncrementStorageError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_IncrementStorageError_Call) RunAndReturn(run func(context.Context)) *MockAggregatorMetricLabeler_IncrementStorageError_Call {
	_c.Run(run)
	return _c
}

// RecordAPIRequestDuration provides a mock function with given fields: ctx, durationMs
func (_m *MockAggregatorMetricLabeler) RecordAPIRequestDuration(ctx context.Context, durationMs int64) {
	_m.Called(ctx, durationMs)
}

// MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordAPIRequestDuration'
type MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call struct {
	*mock.Call
}

// RecordAPIRequestDuration is a helper method to define mock.On call
//   - ctx context.Context
//   - durationMs int64
func (_e *MockAggregatorMetricLabeler_Expecter) RecordAPIRequestDuration(ctx interface{}, durationMs interface{}) *MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call {
	return &MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call{Call: _e.mock.On("RecordAPIRequestDuration", ctx, durationMs)}
}

func (_c *MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call) Run(run func(ctx context.Context, durationMs int64)) *MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call) Return() *MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call) RunAndReturn(run func(context.Context, int64)) *MockAggregatorMetricLabeler_RecordAPIRequestDuration_Call {
	_c.Run(run)
	return _c
}

// RecordMessageSinceNumberOfRecordsReturned provides a mock function with given fields: ctx, count
func (_m *MockAggregatorMetricLabeler) RecordMessageSinceNumberOfRecordsReturned(ctx context.Context, count int) {
	_m.Called(ctx, count)
}

// MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordMessageSinceNumberOfRecordsReturned'
type MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call struct {
	*mock.Call
}

// RecordMessageSinceNumberOfRecordsReturned is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *MockAggregatorMetricLabeler_Expecter) RecordMessageSinceNumberOfRecordsReturned(ctx interface{}, count interface{}) *MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call {
	return &MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call{Call: _e.mock.On("RecordMessageSinceNumberOfRecordsReturned", ctx, count)}
}

func (_c *MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call) Run(run func(ctx context.Context, count int)) *MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call) Return() *MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call) RunAndReturn(run func(context.Context, int)) *MockAggregatorMetricLabeler_RecordMessageSinceNumberOfRecordsReturned_Call {
	_c.Run(run)
	return _c
}

// RecordStorageLatency provides a mock function with given fields: ctx, latencyMs
func (_m *MockAggregatorMetricLabeler) RecordStorageLatency(ctx context.Context, latencyMs int64) {
	_m.Called(ctx, latencyMs)
}

// MockAggregatorMetricLabeler_RecordStorageLatency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordStorageLatency'
type MockAggregatorMetricLabeler_RecordStorageLatency_Call struct {
	*mock.Call
}

// RecordStorageLatency is a helper method to define mock.On call
//   - ctx context.Context
//   - latencyMs int64
func (_e *MockAggregatorMetricLabeler_Expecter) RecordStorageLatency(ctx interface{}, latencyMs interface{}) *MockAggregatorMetricLabeler_RecordStorageLatency_Call {
	return &MockAggregatorMetricLabeler_RecordStorageLatency_Call{Call: _e.mock.On("RecordStorageLatency", ctx, latencyMs)}
}

func (_c *MockAggregatorMetricLabeler_RecordStorageLatency_Call) Run(run func(ctx context.Context, latencyMs int64)) *MockAggregatorMetricLabeler_RecordStorageLatency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordStorageLatency_Call) Return() *MockAggregatorMetricLabeler_RecordStorageLatency_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordStorageLatency_Call) RunAndReturn(run func(context.Context, int64)) *MockAggregatorMetricLabeler_RecordStorageLatency_Call {
	_c.Run(run)
	return _c
}

// RecordTimeToAggregation provides a mock function with given fields: ctx, durationMs
func (_m *MockAggregatorMetricLabeler) RecordTimeToAggregation(ctx context.Context, durationMs int64) {
	_m.Called(ctx, durationMs)
}

// MockAggregatorMetricLabeler_RecordTimeToAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordTimeToAggregation'
type MockAggregatorMetricLabeler_RecordTimeToAggregation_Call struct {
	*mock.Call
}

// RecordTimeToAggregation is a helper method to define mock.On call
//   - ctx context.Context
//   - durationMs int64
func (_e *MockAggregatorMetricLabeler_Expecter) RecordTimeToAggregation(ctx interface{}, durationMs interface{}) *MockAggregatorMetricLabeler_RecordTimeToAggregation_Call {
	return &MockAggregatorMetricLabeler_RecordTimeToAggregation_Call{Call: _e.mock.On("RecordTimeToAggregation", ctx, durationMs)}
}

func (_c *MockAggregatorMetricLabeler_RecordTimeToAggregation_Call) Run(run func(ctx context.Context, durationMs int64)) *MockAggregatorMetricLabeler_RecordTimeToAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordTimeToAggregation_Call) Return() *MockAggregatorMetricLabeler_RecordTimeToAggregation_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAggregatorMetricLabeler_RecordTimeToAggregation_Call) RunAndReturn(run func(context.Context, int64)) *MockAggregatorMetricLabeler_RecordTimeToAggregation_Call {
	_c.Run(run)
	return _c
}

// With provides a mock function with given fields: keyValues
func (_m *MockAggregatorMetricLabeler) With(keyValues ...string) common.AggregatorMetricLabeler {
	_va := make([]interface{}, len(keyValues))
	for _i := range keyValues {
		_va[_i] = keyValues[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 common.AggregatorMetricLabeler
	if rf, ok := ret.Get(0).(func(...string) common.AggregatorMetricLabeler); ok {
		r0 = rf(keyValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.AggregatorMetricLabeler)
		}
	}

	return r0
}

// MockAggregatorMetricLabeler_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type MockAggregatorMetricLabeler_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - keyValues ...string
func (_e *MockAggregatorMetricLabeler_Expecter) With(keyValues ...interface{}) *MockAggregatorMetricLabeler_With_Call {
	return &MockAggregatorMetricLabeler_With_Call{Call: _e.mock.On("With",
		append([]interface{}{}, keyValues...)...)}
}

func (_c *MockAggregatorMetricLabeler_With_Call) Run(run func(keyValues ...string)) *MockAggregatorMetricLabeler_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockAggregatorMetricLabeler_With_Call) Return(_a0 common.AggregatorMetricLabeler) *MockAggregatorMetricLabeler_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregatorMetricLabeler_With_Call) RunAndReturn(run func(...string) common.AggregatorMetricLabeler) *MockAggregatorMetricLabeler_With_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAggregatorMetricLabeler creates a new instance of MockAggregatorMetricLabeler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggregatorMetricLabeler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggregatorMetricLabeler {
	mock := &MockAggregatorMetricLabeler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
