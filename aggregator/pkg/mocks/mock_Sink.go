// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/smartcontractkit/chainlink-ccv/aggregator/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockSink is an autogenerated mock type for the Sink type
type MockSink struct {
	mock.Mock
}

type MockSink_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSink) EXPECT() *MockSink_Expecter {
	return &MockSink_Expecter{mock: &_m.Mock}
}

// SubmitReport provides a mock function with given fields: ctx, report
func (_m *MockSink) SubmitReport(ctx context.Context, report *model.CommitAggregatedReport) error {
	ret := _m.Called(ctx, report)

	if len(ret) == 0 {
		panic("no return value specified for SubmitReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CommitAggregatedReport) error); ok {
		r0 = rf(ctx, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSink_SubmitReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitReport'
type MockSink_SubmitReport_Call struct {
	*mock.Call
}

// SubmitReport is a helper method to define mock.On call
//   - ctx context.Context
//   - report *model.CommitAggregatedReport
func (_e *MockSink_Expecter) SubmitReport(ctx interface{}, report interface{}) *MockSink_SubmitReport_Call {
	return &MockSink_SubmitReport_Call{Call: _e.mock.On("SubmitReport", ctx, report)}
}

func (_c *MockSink_SubmitReport_Call) Run(run func(ctx context.Context, report *model.CommitAggregatedReport)) *MockSink_SubmitReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.CommitAggregatedReport))
	})
	return _c
}

func (_c *MockSink_SubmitReport_Call) Return(_a0 error) *MockSink_SubmitReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSink_SubmitReport_Call) RunAndReturn(run func(context.Context, *model.CommitAggregatedReport) error) *MockSink_SubmitReport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSink creates a new instance of MockSink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSink {
	mock := &MockSink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
