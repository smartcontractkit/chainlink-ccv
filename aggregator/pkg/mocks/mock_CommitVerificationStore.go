// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/smartcontractkit/chainlink-ccv/aggregator/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCommitVerificationStore is an autogenerated mock type for the CommitVerificationStore type
type MockCommitVerificationStore struct {
	mock.Mock
}

type MockCommitVerificationStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommitVerificationStore) EXPECT() *MockCommitVerificationStore_Expecter {
	return &MockCommitVerificationStore_Expecter{mock: &_m.Mock}
}

// GetCommitVerification provides a mock function with given fields: ctx, id
func (_m *MockCommitVerificationStore) GetCommitVerification(ctx context.Context, id model.CommitVerificationRecordIdentifier) (*model.CommitVerificationRecord, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitVerification")
	}

	var r0 *model.CommitVerificationRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CommitVerificationRecordIdentifier) (*model.CommitVerificationRecord, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CommitVerificationRecordIdentifier) *model.CommitVerificationRecord); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CommitVerificationRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CommitVerificationRecordIdentifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitVerificationStore_GetCommitVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitVerification'
type MockCommitVerificationStore_GetCommitVerification_Call struct {
	*mock.Call
}

// GetCommitVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - id model.CommitVerificationRecordIdentifier
func (_e *MockCommitVerificationStore_Expecter) GetCommitVerification(ctx interface{}, id interface{}) *MockCommitVerificationStore_GetCommitVerification_Call {
	return &MockCommitVerificationStore_GetCommitVerification_Call{Call: _e.mock.On("GetCommitVerification", ctx, id)}
}

func (_c *MockCommitVerificationStore_GetCommitVerification_Call) Run(run func(ctx context.Context, id model.CommitVerificationRecordIdentifier)) *MockCommitVerificationStore_GetCommitVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CommitVerificationRecordIdentifier))
	})
	return _c
}

func (_c *MockCommitVerificationStore_GetCommitVerification_Call) Return(_a0 *model.CommitVerificationRecord, _a1 error) *MockCommitVerificationStore_GetCommitVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitVerificationStore_GetCommitVerification_Call) RunAndReturn(run func(context.Context, model.CommitVerificationRecordIdentifier) (*model.CommitVerificationRecord, error)) *MockCommitVerificationStore_GetCommitVerification_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommitVerificationByMessageID provides a mock function with given fields: ctx, messageID, committee
func (_m *MockCommitVerificationStore) ListCommitVerificationByMessageID(ctx context.Context, messageID []byte, committee string) ([]*model.CommitVerificationRecord, error) {
	ret := _m.Called(ctx, messageID, committee)

	if len(ret) == 0 {
		panic("no return value specified for ListCommitVerificationByMessageID")
	}

	var r0 []*model.CommitVerificationRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) ([]*model.CommitVerificationRecord, error)); ok {
		return rf(ctx, messageID, committee)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) []*model.CommitVerificationRecord); ok {
		r0 = rf(ctx, messageID, committee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CommitVerificationRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, messageID, committee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitVerificationStore_ListCommitVerificationByMessageID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommitVerificationByMessageID'
type MockCommitVerificationStore_ListCommitVerificationByMessageID_Call struct {
	*mock.Call
}

// ListCommitVerificationByMessageID is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID []byte
//   - committee string
func (_e *MockCommitVerificationStore_Expecter) ListCommitVerificationByMessageID(ctx interface{}, messageID interface{}, committee interface{}) *MockCommitVerificationStore_ListCommitVerificationByMessageID_Call {
	return &MockCommitVerificationStore_ListCommitVerificationByMessageID_Call{Call: _e.mock.On("ListCommitVerificationByMessageID", ctx, messageID, committee)}
}

func (_c *MockCommitVerificationStore_ListCommitVerificationByMessageID_Call) Run(run func(ctx context.Context, messageID []byte, committee string)) *MockCommitVerificationStore_ListCommitVerificationByMessageID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockCommitVerificationStore_ListCommitVerificationByMessageID_Call) Return(_a0 []*model.CommitVerificationRecord, _a1 error) *MockCommitVerificationStore_ListCommitVerificationByMessageID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitVerificationStore_ListCommitVerificationByMessageID_Call) RunAndReturn(run func(context.Context, []byte, string) ([]*model.CommitVerificationRecord, error)) *MockCommitVerificationStore_ListCommitVerificationByMessageID_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrphanedMessageCommitteePairs provides a mock function with given fields: ctx
func (_m *MockCommitVerificationStore) ListOrphanedMessageCommitteePairs(ctx context.Context) (<-chan *model.MessageCommitteePair, <-chan error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOrphanedMessageCommitteePairs")
	}

	var r0 <-chan *model.MessageCommitteePair
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan *model.MessageCommitteePair, <-chan error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *model.MessageCommitteePair); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *model.MessageCommitteePair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) <-chan error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrphanedMessageCommitteePairs'
type MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call struct {
	*mock.Call
}

// ListOrphanedMessageCommitteePairs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCommitVerificationStore_Expecter) ListOrphanedMessageCommitteePairs(ctx interface{}) *MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call {
	return &MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call{Call: _e.mock.On("ListOrphanedMessageCommitteePairs", ctx)}
}

func (_c *MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call) Run(run func(ctx context.Context)) *MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call) Return(_a0 <-chan *model.MessageCommitteePair, _a1 <-chan error) *MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call) RunAndReturn(run func(context.Context) (<-chan *model.MessageCommitteePair, <-chan error)) *MockCommitVerificationStore_ListOrphanedMessageCommitteePairs_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCommitVerification provides a mock function with given fields: ctx, record
func (_m *MockCommitVerificationStore) SaveCommitVerification(ctx context.Context, record *model.CommitVerificationRecord) error {
	ret := _m.Called(ctx, record)

	if len(ret) == 0 {
		panic("no return value specified for SaveCommitVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CommitVerificationRecord) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitVerificationStore_SaveCommitVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCommitVerification'
type MockCommitVerificationStore_SaveCommitVerification_Call struct {
	*mock.Call
}

// SaveCommitVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - record *model.CommitVerificationRecord
func (_e *MockCommitVerificationStore_Expecter) SaveCommitVerification(ctx interface{}, record interface{}) *MockCommitVerificationStore_SaveCommitVerification_Call {
	return &MockCommitVerificationStore_SaveCommitVerification_Call{Call: _e.mock.On("SaveCommitVerification", ctx, record)}
}

func (_c *MockCommitVerificationStore_SaveCommitVerification_Call) Run(run func(ctx context.Context, record *model.CommitVerificationRecord)) *MockCommitVerificationStore_SaveCommitVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.CommitVerificationRecord))
	})
	return _c
}

func (_c *MockCommitVerificationStore_SaveCommitVerification_Call) Return(_a0 error) *MockCommitVerificationStore_SaveCommitVerification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitVerificationStore_SaveCommitVerification_Call) RunAndReturn(run func(context.Context, *model.CommitVerificationRecord) error) *MockCommitVerificationStore_SaveCommitVerification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommitVerificationStore creates a new instance of MockCommitVerificationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommitVerificationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommitVerificationStore {
	mock := &MockCommitVerificationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
