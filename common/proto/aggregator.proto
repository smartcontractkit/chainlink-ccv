syntax = "proto3";

option go_package = "pb/aggregator";
import "google/protobuf/timestamp.proto";

service Aggregator {
  rpc WriteCommitVerification(WriteCommitVerificationRequest) returns (WriteCommitVerificationResponse);
  rpc ReadCommitVerification(ReadCommitVerificationRequest) returns (ReadCommitVerificationResponse);
  rpc QueryAggregatedCommitRecords(QueryAggregatedCommitRecordsRequest) returns (QueryAggregatedCommitRecordsResponse);
}

message Message {
  uint32 version = 1;
  uint64 source_chain_selector = 2;
  uint64 dest_chain_selector = 3;
  uint64 sequence_number = 4;
  uint32 on_ramp_address_length = 5;
  bytes on_ramp_address = 6;
  uint32 off_ramp_address_length = 7;
  bytes off_ramp_address = 8;
  uint32 finality = 9;
  uint32 sender_length = 10;
  bytes sender = 11;
  uint32 receiver_length = 12;
  bytes receiver = 13;
  uint32 dest_blob_length = 14;
  bytes dest_blob = 15;
  uint32 token_transfer_length = 16;
  bytes token_transfer = 17;
  uint32 data_length = 18;
  bytes data = 19;
}

message ReceiptBlob {
  bytes issuer = 1;
  uint64 dest_gas_limit = 2;
  uint32 dest_bytes_overhead = 3;
  bytes blob = 4;
  bytes extra_args = 5;
}

message CommitVerificationRecord {
  bytes message_id = 1;
  uint64 sequence_number = 2;
  uint64 source_chain_selector = 3;
  uint64 dest_chain_selector = 4;
  bytes source_verifier_address = 5;
  bytes dest_verifier_address = 6;
  // ccv_data is the signature from the commit verifier node of the message data and the blob data
  bytes ccv_data = 7;
  // blob_data is the encoded nonce from the source chain
  bytes blob_data = 8;
  uint64 timestamp = 9;
  Message message = 10;
  repeated ReceiptBlob receipt_blobs = 11;
}

message WriteCommitVerificationRequest {
  CommitVerificationRecord commit_verification_record = 1;
  // This is the id of the signer. In concrete term every node operator will have their own id which identify them uniquely
  string participant_id = 2;
  // This is used to seperate different group of signers. As we can have multiple commit verifiers
  string committee_id = 3;
}

enum WriteStatus {
  SUCCESS = 0;
  FAILED = 1;
}

message WriteCommitVerificationResponse {
  WriteStatus status = 1;
}

message ReadCommitVerificationRequest {
  bytes message_id = 1;
  string participant_id = 2;
  string committee_id = 3;
}

message ReadCommitVerificationResponse {
  CommitVerificationRecord commit_verification_record = 1;
}

// Query Commit Verification Records between a time range. The result is paginated and sorted in ascending order (from oldest to newest)
message QueryAggregatedCommitRecordsRequest {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
    string next_token = 3;
}

message QueryAggregatedCommitRecordsResponse {
    repeated CommitVerificationRecord records = 1;
    string next_token = 2;
    uint32 total = 3;
}