// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	types "github.com/smartcontractkit/chainlink-ccv/executor/types"
	mock "github.com/stretchr/testify/mock"
)

// MockCcvDataReader is an autogenerated mock type for the CcvDataReader type
type MockCcvDataReader struct {
	mock.Mock
}

type MockCcvDataReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCcvDataReader) EXPECT() *MockCcvDataReader_Expecter {
	return &MockCcvDataReader_Expecter{mock: &_m.Mock}
}

// SubscribeMessages provides a mock function with no fields
func (_m *MockCcvDataReader) SubscribeMessages() (chan types.MessageWithCCVData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubscribeMessages")
	}

	var r0 chan types.MessageWithCCVData
	var r1 error
	if rf, ok := ret.Get(0).(func() (chan types.MessageWithCCVData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() chan types.MessageWithCCVData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan types.MessageWithCCVData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCcvDataReader_SubscribeMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeMessages'
type MockCcvDataReader_SubscribeMessages_Call struct {
	*mock.Call
}

// SubscribeMessages is a helper method to define mock.On call
func (_e *MockCcvDataReader_Expecter) SubscribeMessages() *MockCcvDataReader_SubscribeMessages_Call {
	return &MockCcvDataReader_SubscribeMessages_Call{Call: _e.mock.On("SubscribeMessages")}
}

func (_c *MockCcvDataReader_SubscribeMessages_Call) Run(run func()) *MockCcvDataReader_SubscribeMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCcvDataReader_SubscribeMessages_Call) Return(_a0 chan types.MessageWithCCVData, _a1 error) *MockCcvDataReader_SubscribeMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCcvDataReader_SubscribeMessages_Call) RunAndReturn(run func() (chan types.MessageWithCCVData, error)) *MockCcvDataReader_SubscribeMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCcvDataReader creates a new instance of MockCcvDataReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCcvDataReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCcvDataReader {
	mock := &MockCcvDataReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
