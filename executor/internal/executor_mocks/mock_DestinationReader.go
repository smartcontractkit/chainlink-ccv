// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	context "context"

	executortypes "github.com/smartcontractkit/chainlink-ccv/executor/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-ccv/protocol/pkg/types"
)

// MockDestinationReader is an autogenerated mock type for the DestinationReader type
type MockDestinationReader struct {
	mock.Mock
}

type MockDestinationReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDestinationReader) EXPECT() *MockDestinationReader_Expecter {
	return &MockDestinationReader_Expecter{mock: &_m.Mock}
}

// GetCCVSForMessage provides a mock function with given fields: ctx, message
func (_m *MockDestinationReader) GetCCVSForMessage(ctx context.Context, message types.Message) (executortypes.CcvAddressInfo, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for GetCCVSForMessage")
	}

	var r0 executortypes.CcvAddressInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Message) (executortypes.CcvAddressInfo, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Message) executortypes.CcvAddressInfo); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Get(0).(executortypes.CcvAddressInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Message) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDestinationReader_GetCCVSForMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCCVSForMessage'
type MockDestinationReader_GetCCVSForMessage_Call struct {
	*mock.Call
}

// GetCCVSForMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.Message
func (_e *MockDestinationReader_Expecter) GetCCVSForMessage(ctx interface{}, message interface{}) *MockDestinationReader_GetCCVSForMessage_Call {
	return &MockDestinationReader_GetCCVSForMessage_Call{Call: _e.mock.On("GetCCVSForMessage", ctx, message)}
}

func (_c *MockDestinationReader_GetCCVSForMessage_Call) Run(run func(ctx context.Context, message types.Message)) *MockDestinationReader_GetCCVSForMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Message))
	})
	return _c
}

func (_c *MockDestinationReader_GetCCVSForMessage_Call) Return(_a0 executortypes.CcvAddressInfo, _a1 error) *MockDestinationReader_GetCCVSForMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDestinationReader_GetCCVSForMessage_Call) RunAndReturn(run func(context.Context, types.Message) (executortypes.CcvAddressInfo, error)) *MockDestinationReader_GetCCVSForMessage_Call {
	_c.Call.Return(run)
	return _c
}

// IsMessageExecuted provides a mock function with given fields: ctx, message
func (_m *MockDestinationReader) IsMessageExecuted(ctx context.Context, message types.Message) (bool, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for IsMessageExecuted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Message) (bool, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Message) bool); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Message) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDestinationReader_IsMessageExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMessageExecuted'
type MockDestinationReader_IsMessageExecuted_Call struct {
	*mock.Call
}

// IsMessageExecuted is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.Message
func (_e *MockDestinationReader_Expecter) IsMessageExecuted(ctx interface{}, message interface{}) *MockDestinationReader_IsMessageExecuted_Call {
	return &MockDestinationReader_IsMessageExecuted_Call{Call: _e.mock.On("IsMessageExecuted", ctx, message)}
}

func (_c *MockDestinationReader_IsMessageExecuted_Call) Run(run func(ctx context.Context, message types.Message)) *MockDestinationReader_IsMessageExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Message))
	})
	return _c
}

func (_c *MockDestinationReader_IsMessageExecuted_Call) Return(_a0 bool, _a1 error) *MockDestinationReader_IsMessageExecuted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDestinationReader_IsMessageExecuted_Call) RunAndReturn(run func(context.Context, types.Message) (bool, error)) *MockDestinationReader_IsMessageExecuted_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDestinationReader creates a new instance of MockDestinationReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDestinationReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDestinationReader {
	mock := &MockDestinationReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
