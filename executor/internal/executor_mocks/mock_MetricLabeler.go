// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	context "context"

	executor "github.com/smartcontractkit/chainlink-ccv/executor"
	mock "github.com/stretchr/testify/mock"
)

// MockMetricLabeler is an autogenerated mock type for the MetricLabeler type
type MockMetricLabeler struct {
	mock.Mock
}

type MockMetricLabeler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricLabeler) EXPECT() *MockMetricLabeler_Expecter {
	return &MockMetricLabeler_Expecter{mock: &_m.Mock}
}

// IncrementUniqueMessagesCounter provides a mock function with given fields: ctx
func (_m *MockMetricLabeler) IncrementUniqueMessagesCounter(ctx context.Context) {
	_m.Called(ctx)
}

// MockMetricLabeler_IncrementUniqueMessagesCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementUniqueMessagesCounter'
type MockMetricLabeler_IncrementUniqueMessagesCounter_Call struct {
	*mock.Call
}

// IncrementUniqueMessagesCounter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricLabeler_Expecter) IncrementUniqueMessagesCounter(ctx interface{}) *MockMetricLabeler_IncrementUniqueMessagesCounter_Call {
	return &MockMetricLabeler_IncrementUniqueMessagesCounter_Call{Call: _e.mock.On("IncrementUniqueMessagesCounter", ctx)}
}

func (_c *MockMetricLabeler_IncrementUniqueMessagesCounter_Call) Run(run func(ctx context.Context)) *MockMetricLabeler_IncrementUniqueMessagesCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMetricLabeler_IncrementUniqueMessagesCounter_Call) Return() *MockMetricLabeler_IncrementUniqueMessagesCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricLabeler_IncrementUniqueMessagesCounter_Call) RunAndReturn(run func(context.Context)) *MockMetricLabeler_IncrementUniqueMessagesCounter_Call {
	_c.Run(run)
	return _c
}

// With provides a mock function with given fields: keyValues
func (_m *MockMetricLabeler) With(keyValues ...string) executor.MetricLabeler {
	_va := make([]interface{}, len(keyValues))
	for _i := range keyValues {
		_va[_i] = keyValues[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 executor.MetricLabeler
	if rf, ok := ret.Get(0).(func(...string) executor.MetricLabeler); ok {
		r0 = rf(keyValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(executor.MetricLabeler)
		}
	}

	return r0
}

// MockMetricLabeler_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type MockMetricLabeler_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - keyValues ...string
func (_e *MockMetricLabeler_Expecter) With(keyValues ...interface{}) *MockMetricLabeler_With_Call {
	return &MockMetricLabeler_With_Call{Call: _e.mock.On("With",
		append([]interface{}{}, keyValues...)...)}
}

func (_c *MockMetricLabeler_With_Call) Run(run func(keyValues ...string)) *MockMetricLabeler_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockMetricLabeler_With_Call) Return(_a0 executor.MetricLabeler) *MockMetricLabeler_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricLabeler_With_Call) RunAndReturn(run func(...string) executor.MetricLabeler) *MockMetricLabeler_With_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricLabeler creates a new instance of MockMetricLabeler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricLabeler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricLabeler {
	mock := &MockMetricLabeler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
