// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	context "context"

	executor "github.com/smartcontractkit/chainlink-ccv/executor"
	mock "github.com/stretchr/testify/mock"
)

// MockContractTransmitter is an autogenerated mock type for the ContractTransmitter type
type MockContractTransmitter struct {
	mock.Mock
}

type MockContractTransmitter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContractTransmitter) EXPECT() *MockContractTransmitter_Expecter {
	return &MockContractTransmitter_Expecter{mock: &_m.Mock}
}

// ConvertAndWriteMessageToChain provides a mock function with given fields: ctx, report
func (_m *MockContractTransmitter) ConvertAndWriteMessageToChain(ctx context.Context, report executor.AbstractAggregatedReport) error {
	ret := _m.Called(ctx, report)

	if len(ret) == 0 {
		panic("no return value specified for ConvertAndWriteMessageToChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, executor.AbstractAggregatedReport) error); ok {
		r0 = rf(ctx, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContractTransmitter_ConvertAndWriteMessageToChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertAndWriteMessageToChain'
type MockContractTransmitter_ConvertAndWriteMessageToChain_Call struct {
	*mock.Call
}

// ConvertAndWriteMessageToChain is a helper method to define mock.On call
//   - ctx context.Context
//   - report executor.AbstractAggregatedReport
func (_e *MockContractTransmitter_Expecter) ConvertAndWriteMessageToChain(ctx interface{}, report interface{}) *MockContractTransmitter_ConvertAndWriteMessageToChain_Call {
	return &MockContractTransmitter_ConvertAndWriteMessageToChain_Call{Call: _e.mock.On("ConvertAndWriteMessageToChain", ctx, report)}
}

func (_c *MockContractTransmitter_ConvertAndWriteMessageToChain_Call) Run(run func(ctx context.Context, report executor.AbstractAggregatedReport)) *MockContractTransmitter_ConvertAndWriteMessageToChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executor.AbstractAggregatedReport))
	})
	return _c
}

func (_c *MockContractTransmitter_ConvertAndWriteMessageToChain_Call) Return(_a0 error) *MockContractTransmitter_ConvertAndWriteMessageToChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContractTransmitter_ConvertAndWriteMessageToChain_Call) RunAndReturn(run func(context.Context, executor.AbstractAggregatedReport) error) *MockContractTransmitter_ConvertAndWriteMessageToChain_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContractTransmitter creates a new instance of MockContractTransmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContractTransmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContractTransmitter {
	mock := &MockContractTransmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
