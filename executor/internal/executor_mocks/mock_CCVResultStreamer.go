// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	context "context"

	executor "github.com/smartcontractkit/chainlink-ccv/executor"
	logger "github.com/smartcontractkit/chainlink-common/pkg/logger"

	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// MockCCVResultStreamer is an autogenerated mock type for the CCVResultStreamer type
type MockCCVResultStreamer struct {
	mock.Mock
}

type MockCCVResultStreamer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCCVResultStreamer) EXPECT() *MockCCVResultStreamer_Expecter {
	return &MockCCVResultStreamer_Expecter{mock: &_m.Mock}
}

// IsRunning provides a mock function with no fields
func (_m *MockCCVResultStreamer) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCCVResultStreamer_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockCCVResultStreamer_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockCCVResultStreamer_Expecter) IsRunning() *MockCCVResultStreamer_IsRunning_Call {
	return &MockCCVResultStreamer_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockCCVResultStreamer_IsRunning_Call) Run(run func()) *MockCCVResultStreamer_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCCVResultStreamer_IsRunning_Call) Return(_a0 bool) *MockCCVResultStreamer_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCCVResultStreamer_IsRunning_Call) RunAndReturn(run func() bool) *MockCCVResultStreamer_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, lggr, wg
func (_m *MockCCVResultStreamer) Start(ctx context.Context, lggr logger.Logger, wg *sync.WaitGroup) (<-chan executor.StreamerResult, error) {
	ret := _m.Called(ctx, lggr, wg)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 <-chan executor.StreamerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logger.Logger, *sync.WaitGroup) (<-chan executor.StreamerResult, error)); ok {
		return rf(ctx, lggr, wg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logger.Logger, *sync.WaitGroup) <-chan executor.StreamerResult); ok {
		r0 = rf(ctx, lggr, wg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan executor.StreamerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, logger.Logger, *sync.WaitGroup) error); ok {
		r1 = rf(ctx, lggr, wg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCVResultStreamer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCCVResultStreamer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - lggr logger.Logger
//   - wg *sync.WaitGroup
func (_e *MockCCVResultStreamer_Expecter) Start(ctx interface{}, lggr interface{}, wg interface{}) *MockCCVResultStreamer_Start_Call {
	return &MockCCVResultStreamer_Start_Call{Call: _e.mock.On("Start", ctx, lggr, wg)}
}

func (_c *MockCCVResultStreamer_Start_Call) Run(run func(ctx context.Context, lggr logger.Logger, wg *sync.WaitGroup)) *MockCCVResultStreamer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(logger.Logger), args[2].(*sync.WaitGroup))
	})
	return _c
}

func (_c *MockCCVResultStreamer_Start_Call) Return(_a0 <-chan executor.StreamerResult, _a1 error) *MockCCVResultStreamer_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCCVResultStreamer_Start_Call) RunAndReturn(run func(context.Context, logger.Logger, *sync.WaitGroup) (<-chan executor.StreamerResult, error)) *MockCCVResultStreamer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCCVResultStreamer creates a new instance of MockCCVResultStreamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCCVResultStreamer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCCVResultStreamer {
	mock := &MockCCVResultStreamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
