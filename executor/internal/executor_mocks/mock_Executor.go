// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	context "context"

	executor "github.com/smartcontractkit/chainlink-ccv/executor"
	mock "github.com/stretchr/testify/mock"
)

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// CheckValidMessage provides a mock function with given fields: ctx, messageWithCCVData
func (_m *MockExecutor) CheckValidMessage(ctx context.Context, messageWithCCVData executor.MessageWithCCVData) error {
	ret := _m.Called(ctx, messageWithCCVData)

	if len(ret) == 0 {
		panic("no return value specified for CheckValidMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, executor.MessageWithCCVData) error); ok {
		r0 = rf(ctx, messageWithCCVData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutor_CheckValidMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckValidMessage'
type MockExecutor_CheckValidMessage_Call struct {
	*mock.Call
}

// CheckValidMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - messageWithCCVData executor.MessageWithCCVData
func (_e *MockExecutor_Expecter) CheckValidMessage(ctx interface{}, messageWithCCVData interface{}) *MockExecutor_CheckValidMessage_Call {
	return &MockExecutor_CheckValidMessage_Call{Call: _e.mock.On("CheckValidMessage", ctx, messageWithCCVData)}
}

func (_c *MockExecutor_CheckValidMessage_Call) Run(run func(ctx context.Context, messageWithCCVData executor.MessageWithCCVData)) *MockExecutor_CheckValidMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executor.MessageWithCCVData))
	})
	return _c
}

func (_c *MockExecutor_CheckValidMessage_Call) Return(_a0 error) *MockExecutor_CheckValidMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutor_CheckValidMessage_Call) RunAndReturn(run func(context.Context, executor.MessageWithCCVData) error) *MockExecutor_CheckValidMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteMessage provides a mock function with given fields: ctx, messageWithCCVData
func (_m *MockExecutor) ExecuteMessage(ctx context.Context, messageWithCCVData executor.MessageWithCCVData) error {
	ret := _m.Called(ctx, messageWithCCVData)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, executor.MessageWithCCVData) error); ok {
		r0 = rf(ctx, messageWithCCVData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutor_ExecuteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteMessage'
type MockExecutor_ExecuteMessage_Call struct {
	*mock.Call
}

// ExecuteMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - messageWithCCVData executor.MessageWithCCVData
func (_e *MockExecutor_Expecter) ExecuteMessage(ctx interface{}, messageWithCCVData interface{}) *MockExecutor_ExecuteMessage_Call {
	return &MockExecutor_ExecuteMessage_Call{Call: _e.mock.On("ExecuteMessage", ctx, messageWithCCVData)}
}

func (_c *MockExecutor_ExecuteMessage_Call) Run(run func(ctx context.Context, messageWithCCVData executor.MessageWithCCVData)) *MockExecutor_ExecuteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executor.MessageWithCCVData))
	})
	return _c
}

func (_c *MockExecutor_ExecuteMessage_Call) Return(_a0 error) *MockExecutor_ExecuteMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutor_ExecuteMessage_Call) RunAndReturn(run func(context.Context, executor.MessageWithCCVData) error) *MockExecutor_ExecuteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
