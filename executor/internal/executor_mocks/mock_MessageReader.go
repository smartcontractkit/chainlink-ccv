// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	protocol "github.com/smartcontractkit/chainlink-ccv/protocol"

	storageaccess "github.com/smartcontractkit/chainlink-ccv/common/storageaccess"
)

// MockMessageReader is an autogenerated mock type for the MessageReader type
type MockMessageReader struct {
	mock.Mock
}

type MockMessageReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageReader) EXPECT() *MockMessageReader_Expecter {
	return &MockMessageReader_Expecter{mock: &_m.Mock}
}

// ReadMessages provides a mock function with given fields: ctx, queryData
func (_m *MockMessageReader) ReadMessages(ctx context.Context, queryData storageaccess.MessagesV1Request) (map[string]protocol.Message, error) {
	ret := _m.Called(ctx, queryData)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessages")
	}

	var r0 map[string]protocol.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storageaccess.MessagesV1Request) (map[string]protocol.Message, error)); ok {
		return rf(ctx, queryData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storageaccess.MessagesV1Request) map[string]protocol.Message); ok {
		r0 = rf(ctx, queryData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]protocol.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storageaccess.MessagesV1Request) error); ok {
		r1 = rf(ctx, queryData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageReader_ReadMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadMessages'
type MockMessageReader_ReadMessages_Call struct {
	*mock.Call
}

// ReadMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - queryData storageaccess.MessagesV1Request
func (_e *MockMessageReader_Expecter) ReadMessages(ctx interface{}, queryData interface{}) *MockMessageReader_ReadMessages_Call {
	return &MockMessageReader_ReadMessages_Call{Call: _e.mock.On("ReadMessages", ctx, queryData)}
}

func (_c *MockMessageReader_ReadMessages_Call) Run(run func(ctx context.Context, queryData storageaccess.MessagesV1Request)) *MockMessageReader_ReadMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storageaccess.MessagesV1Request))
	})
	return _c
}

func (_c *MockMessageReader_ReadMessages_Call) Return(_a0 map[string]protocol.Message, _a1 error) *MockMessageReader_ReadMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageReader_ReadMessages_Call) RunAndReturn(run func(context.Context, storageaccess.MessagesV1Request) (map[string]protocol.Message, error)) *MockMessageReader_ReadMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageReader creates a new instance of MockMessageReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageReader {
	mock := &MockMessageReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
