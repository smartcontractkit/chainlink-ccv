// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	protocol "github.com/smartcontractkit/chainlink-ccv/protocol"
)

// MockVerifierResultReader is an autogenerated mock type for the VerifierResultReader type
type MockVerifierResultReader struct {
	mock.Mock
}

type MockVerifierResultReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifierResultReader) EXPECT() *MockVerifierResultReader_Expecter {
	return &MockVerifierResultReader_Expecter{mock: &_m.Mock}
}

// GetVerifierResults provides a mock function with given fields: ctx, messageID
func (_m *MockVerifierResultReader) GetVerifierResults(ctx context.Context, messageID protocol.Bytes32) ([]protocol.CCVData, error) {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetVerifierResults")
	}

	var r0 []protocol.CCVData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, protocol.Bytes32) ([]protocol.CCVData, error)); ok {
		return rf(ctx, messageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, protocol.Bytes32) []protocol.CCVData); ok {
		r0 = rf(ctx, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]protocol.CCVData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, protocol.Bytes32) error); ok {
		r1 = rf(ctx, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerifierResultReader_GetVerifierResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerifierResults'
type MockVerifierResultReader_GetVerifierResults_Call struct {
	*mock.Call
}

// GetVerifierResults is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID protocol.Bytes32
func (_e *MockVerifierResultReader_Expecter) GetVerifierResults(ctx interface{}, messageID interface{}) *MockVerifierResultReader_GetVerifierResults_Call {
	return &MockVerifierResultReader_GetVerifierResults_Call{Call: _e.mock.On("GetVerifierResults", ctx, messageID)}
}

func (_c *MockVerifierResultReader_GetVerifierResults_Call) Run(run func(ctx context.Context, messageID protocol.Bytes32)) *MockVerifierResultReader_GetVerifierResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(protocol.Bytes32))
	})
	return _c
}

func (_c *MockVerifierResultReader_GetVerifierResults_Call) Return(_a0 []protocol.CCVData, _a1 error) *MockVerifierResultReader_GetVerifierResults_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerifierResultReader_GetVerifierResults_Call) RunAndReturn(run func(context.Context, protocol.Bytes32) ([]protocol.CCVData, error)) *MockVerifierResultReader_GetVerifierResults_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerifierResultReader creates a new instance of MockVerifierResultReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifierResultReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifierResultReader {
	mock := &MockVerifierResultReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
