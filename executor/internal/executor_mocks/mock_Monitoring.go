// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	executor "github.com/smartcontractkit/chainlink-ccv/executor"
	mock "github.com/stretchr/testify/mock"
)

// MockMonitoring is an autogenerated mock type for the Monitoring type
type MockMonitoring struct {
	mock.Mock
}

type MockMonitoring_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonitoring) EXPECT() *MockMonitoring_Expecter {
	return &MockMonitoring_Expecter{mock: &_m.Mock}
}

// Metrics provides a mock function with no fields
func (_m *MockMonitoring) Metrics() executor.MetricLabeler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metrics")
	}

	var r0 executor.MetricLabeler
	if rf, ok := ret.Get(0).(func() executor.MetricLabeler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(executor.MetricLabeler)
		}
	}

	return r0
}

// MockMonitoring_Metrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metrics'
type MockMonitoring_Metrics_Call struct {
	*mock.Call
}

// Metrics is a helper method to define mock.On call
func (_e *MockMonitoring_Expecter) Metrics() *MockMonitoring_Metrics_Call {
	return &MockMonitoring_Metrics_Call{Call: _e.mock.On("Metrics")}
}

func (_c *MockMonitoring_Metrics_Call) Run(run func()) *MockMonitoring_Metrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonitoring_Metrics_Call) Return(_a0 executor.MetricLabeler) *MockMonitoring_Metrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonitoring_Metrics_Call) RunAndReturn(run func() executor.MetricLabeler) *MockMonitoring_Metrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMonitoring creates a new instance of MockMonitoring. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMonitoring(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMonitoring {
	mock := &MockMonitoring{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
