// Code generated by mockery v2.53.5. DO NOT EDIT.

package executor_mocks

import (
	protocol "github.com/smartcontractkit/chainlink-ccv/protocol"
	mock "github.com/stretchr/testify/mock"
)

// MockLeaderElector is an autogenerated mock type for the LeaderElector type
type MockLeaderElector struct {
	mock.Mock
}

type MockLeaderElector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeaderElector) EXPECT() *MockLeaderElector_Expecter {
	return &MockLeaderElector_Expecter{mock: &_m.Mock}
}

// GetReadyTimestamp provides a mock function with given fields: messageID, verifierTimestamp
func (_m *MockLeaderElector) GetReadyTimestamp(messageID protocol.Bytes32, verifierTimestamp int64) int64 {
	ret := _m.Called(messageID, verifierTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for GetReadyTimestamp")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(protocol.Bytes32, int64) int64); ok {
		r0 = rf(messageID, verifierTimestamp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockLeaderElector_GetReadyTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadyTimestamp'
type MockLeaderElector_GetReadyTimestamp_Call struct {
	*mock.Call
}

// GetReadyTimestamp is a helper method to define mock.On call
//   - messageID protocol.Bytes32
//   - verifierTimestamp int64
func (_e *MockLeaderElector_Expecter) GetReadyTimestamp(messageID interface{}, verifierTimestamp interface{}) *MockLeaderElector_GetReadyTimestamp_Call {
	return &MockLeaderElector_GetReadyTimestamp_Call{Call: _e.mock.On("GetReadyTimestamp", messageID, verifierTimestamp)}
}

func (_c *MockLeaderElector_GetReadyTimestamp_Call) Run(run func(messageID protocol.Bytes32, verifierTimestamp int64)) *MockLeaderElector_GetReadyTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.Bytes32), args[1].(int64))
	})
	return _c
}

func (_c *MockLeaderElector_GetReadyTimestamp_Call) Return(_a0 int64) *MockLeaderElector_GetReadyTimestamp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaderElector_GetReadyTimestamp_Call) RunAndReturn(run func(protocol.Bytes32, int64) int64) *MockLeaderElector_GetReadyTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLeaderElector creates a new instance of MockLeaderElector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLeaderElector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLeaderElector {
	mock := &MockLeaderElector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
