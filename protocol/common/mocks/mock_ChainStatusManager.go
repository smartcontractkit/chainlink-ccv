// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	protocol "github.com/smartcontractkit/chainlink-ccv/protocol"
)

// MockChainStatusManager is an autogenerated mock type for the ChainStatusManager type
type MockChainStatusManager struct {
	mock.Mock
}

type MockChainStatusManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChainStatusManager) EXPECT() *MockChainStatusManager_Expecter {
	return &MockChainStatusManager_Expecter{mock: &_m.Mock}
}

// ReadChainStatus provides a mock function with given fields: ctx, chainSelector
func (_m *MockChainStatusManager) ReadChainStatus(ctx context.Context, chainSelector protocol.ChainSelector) (*big.Int, error) {
	ret := _m.Called(ctx, chainSelector)

	if len(ret) == 0 {
		panic("no return value specified for ReadChainStatus")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, protocol.ChainSelector) (*big.Int, error)); ok {
		return rf(ctx, chainSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, protocol.ChainSelector) *big.Int); ok {
		r0 = rf(ctx, chainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, protocol.ChainSelector) error); ok {
		r1 = rf(ctx, chainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChainStatusManager_ReadChainStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadChainStatus'
type MockChainStatusManager_ReadChainStatus_Call struct {
	*mock.Call
}

// ReadChainStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - chainSelector protocol.ChainSelector
func (_e *MockChainStatusManager_Expecter) ReadChainStatus(ctx interface{}, chainSelector interface{}) *MockChainStatusManager_ReadChainStatus_Call {
	return &MockChainStatusManager_ReadChainStatus_Call{Call: _e.mock.On("ReadChainStatus", ctx, chainSelector)}
}

func (_c *MockChainStatusManager_ReadChainStatus_Call) Run(run func(ctx context.Context, chainSelector protocol.ChainSelector)) *MockChainStatusManager_ReadChainStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(protocol.ChainSelector))
	})
	return _c
}

func (_c *MockChainStatusManager_ReadChainStatus_Call) Return(_a0 *big.Int, _a1 error) *MockChainStatusManager_ReadChainStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChainStatusManager_ReadChainStatus_Call) RunAndReturn(run func(context.Context, protocol.ChainSelector) (*big.Int, error)) *MockChainStatusManager_ReadChainStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WriteChainStatus provides a mock function with given fields: ctx, chainSelector, blockHeight
func (_m *MockChainStatusManager) WriteChainStatus(ctx context.Context, chainSelector protocol.ChainSelector, blockHeight *big.Int) error {
	ret := _m.Called(ctx, chainSelector, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for WriteChainStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, protocol.ChainSelector, *big.Int) error); ok {
		r0 = rf(ctx, chainSelector, blockHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChainStatusManager_WriteChainStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteChainStatus'
type MockChainStatusManager_WriteChainStatus_Call struct {
	*mock.Call
}

// WriteChainStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - chainSelector protocol.ChainSelector
//   - blockHeight *big.Int
func (_e *MockChainStatusManager_Expecter) WriteChainStatus(ctx interface{}, chainSelector interface{}, blockHeight interface{}) *MockChainStatusManager_WriteChainStatus_Call {
	return &MockChainStatusManager_WriteChainStatus_Call{Call: _e.mock.On("WriteChainStatus", ctx, chainSelector, blockHeight)}
}

func (_c *MockChainStatusManager_WriteChainStatus_Call) Run(run func(ctx context.Context, chainSelector protocol.ChainSelector, blockHeight *big.Int)) *MockChainStatusManager_WriteChainStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(protocol.ChainSelector), args[2].(*big.Int))
	})
	return _c
}

func (_c *MockChainStatusManager_WriteChainStatus_Call) Return(_a0 error) *MockChainStatusManager_WriteChainStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChainStatusManager_WriteChainStatus_Call) RunAndReturn(run func(context.Context, protocol.ChainSelector, *big.Int) error) *MockChainStatusManager_WriteChainStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChainStatusManager creates a new instance of MockChainStatusManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChainStatusManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChainStatusManager {
	mock := &MockChainStatusManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
